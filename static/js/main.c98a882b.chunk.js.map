{"version":3,"sources":["containers/Homepage.js","containers/NotFound.js","components/LoaderButton.js","libs/contextLib.js","libs/errorLib.js","containers/Login.js","libs/hooksLib.js","containers/Read.js","sessions.js","containers/Create.js","containers/Update.js","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","NotFound","LoaderButton","isLoading","disabled","props","Button","children","AppContext","createContext","onError","error","message","toString","Error","alert","Login","history","useHistory","userHasAuthenticated","useContext","useState","setIsLoading","username","setUsername","password","setPassword","event","a","preventDefault","fetch","method","headers","body","JSON","stringify","authenticatedUser","loginResponse","text","loginTypeResponse","console","log","sessionStorage","setItem","push","useEffect","loggedInUser","getItem","Form","onSubmit","Group","size","controlId","Label","Control","autoFocus","type","value","onChange","target","block","length","useFormFields","initialState","fields","setValues","id","Read","targetUser","handleFieldChange","readResponse","sessionCookie","Cookies","get","undefined","parse","getSessionCookie","Create","userID","owner","vaccineBrand","vaccineSite","vaccineDate","createResponse","Update","vaccineSite2","vaccineDate2","updateResponse","Routes","exact","path","App","isAuthenticating","setIsAuthenticating","isAuthenticated","e","handleLogout","onLoad","loggedInUserType","Navbar","collapseOnSelect","bg","expand","to","Brand","Toggle","Collapse","Nav","activeKey","window","location","pathname","Link","onClick","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXAGe,SAASA,IACtB,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,SAAf,UACE,yDACA,mBAAGA,UAAU,aAAb,oF,MCLO,SAASC,IACtB,OACE,qBAAKD,UAAU,uBAAf,SACE,0D,iDCCS,SAASE,EAAT,GAKX,IAJFC,EAIC,EAJDA,UAIC,IAHDH,iBAGC,MAHW,GAGX,MAFDI,gBAEC,SADEC,EACF,oDACD,OACE,eAACC,EAAA,EAAD,yBACEF,SAAUA,GAAYD,EACtBH,UAAS,uBAAkBA,IACvBK,GAHN,cAKGF,GAAa,cAAC,IAAD,CAAeH,UAAU,aACtCK,EAAME,aClBN,IAAMC,EAAaC,wBAAc,MCDjC,SAASC,EAAQC,GACtB,IAAIC,EAAUD,EAAME,WAEdF,aAAiBG,QAAUH,EAAMC,UACrCA,EAAUD,EAAMC,SAGlBG,MAAMH,G,MCAO,SAASI,IACtB,IAAMC,EAAUC,cACRC,EFLDC,qBAAWZ,GEKVW,qBACR,EAAkCE,oBAAS,GAA3C,mBAAOlB,EAAP,KAAkBmB,EAAlB,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAgCH,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAL8B,4CAqB9B,WAA4BC,GAA5B,iBAAAC,EAAA,6DACED,EAAME,iBACNP,GAAa,GAFf,kBAKgCQ,MAAM,8BAA+B,CAC/DC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAACC,kBAAmBb,MAR/C,cAKUc,EALV,gBAWkCA,EAAcC,OAXhD,OAWQC,EAXR,OAYIC,QAAQC,IAAIF,GAEZG,eAAeC,QAAQ,WAAYpB,GACnCmB,eAAeC,QAAQ,WAAYlB,GACnCiB,eAAeC,QAAQ,WAAYJ,GAET,WAAtBA,GACFpB,GAAqB,GACrBF,EAAQ2B,KAAK,KACbJ,QAAQC,IAAI,WACmB,UAAtBF,IACTpB,GAAqB,GACrBF,EAAQ2B,KAAK,KACbJ,QAAQC,IAAI,UAzBlB,kDA+BI/B,EAAQ,EAAD,IACPY,GAAa,GAhCjB,2DArB8B,sBA+D9B,OApDAuB,qBAAU,WACR,IAAMC,EAAeJ,eAAeK,QAAQ,YAC5C,GAAID,EAAc,CAEE,gBADAA,GAEhBtB,EAFgBsB,MAKnB,IA6CD,qBAAK9C,UAAU,QAAf,SACE,eAACgD,EAAA,EAAD,CAAMC,SAjEoB,4CAiE1B,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,WAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,uBACA,cAACL,EAAA,EAAKM,QAAN,CACEC,WAAS,EACTC,KAAK,WACLC,MAAOlC,EACPmC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBnC,EAAYmC,EAAOF,aAGjD,eAACT,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,WAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,uBACA,cAACL,EAAA,EAAKM,QAAN,CACEE,KAAK,WACLC,MAAOhC,EACPiC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBjC,EAAYiC,EAAOF,aAGjD,cAAC,EAAD,CACEG,OAAK,EACLT,KAAK,KACLK,KAAK,SACLrD,UAAWA,EACXC,WAhFCmB,EAASsC,OAAS,GAAKpC,EAASoC,OAAS,GA2E5C,wB,YCzFD,SAASC,EAAcC,GAC5B,MAA4B1C,mBAAS0C,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEA,MAAO,CACLD,EACA,SAASrC,GACPsC,EAAU,2BACLD,GADI,kBAENrC,EAAMgC,OAAOO,GAAKvC,EAAMgC,OAAOF,WCCzB,SAASU,IACpB,MAAkC9C,oBAAS,GAA3C,mBAAOlB,EAAP,KAAkBmB,EAAlB,KACA,EAAoCwC,EAAc,CAC9C1B,kBAAmB,GACnBgC,WAAY,KAFhB,mBAAOJ,EAAP,KAAeK,EAAf,KAF2B,4CAY3B,WAA4B1C,GAA5B,eAAAC,EAAA,6DACID,EAAME,iBACNP,GAAa,GAFjB,kBAKiCQ,MAAM,qCAAsC,CACjEC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBC,kBAAmBM,eAAeK,QAAQ,YAC1CqB,WAAYJ,EAAOI,eAVnC,cAKYE,EALZ,gBAc6BA,EAAahC,OAd1C,OAcQgC,EAdR,OAeQ9B,QAAQC,IAAI6B,GAfpB,kDAkBQ5D,EAAQ,EAAD,IACPY,GAAa,GAnBrB,2DAZ2B,sBAmC7B,OACE,qBAAKtB,UAAU,OAAf,SACE,eAACgD,EAAA,EAAD,CAAMC,SArCmB,4CAqCzB,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,aAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,sBACA,cAACL,EAAA,EAAKM,QAAN,CACEC,WAAS,EACTC,KAAK,aACLC,MAAOO,EAAOI,WACdV,SAAUW,OAGd,cAAC,EAAD,CACET,OAAK,EACLT,KAAK,KACLK,KAAK,SACLrD,UAAWA,EACXC,UAAU,EALZ,gC,sBClDwB,WAC9B,IAAMmE,EAAgBC,IAAQC,IAAI,gBAEZC,IAAlBH,GAGKrC,KAAKyC,MAAMJ,GAGqBK,GCJ5B,SAASC,IACpB,MAAkCxD,oBAAS,GAA3C,mBAAOlB,EAAP,KAAkBmB,EAAlB,KACA,EAAoCwC,EAAc,CAC9C1B,kBAAmB,GACnB0C,OAAQ,GACRC,MAAO,GACPC,aAAc,GACdC,YAAa,GACbC,YAAa,KANjB,mBAAOlB,EAAP,KAAeK,EAAf,KAF6B,4CAgB7B,WAA4B1C,GAA5B,eAAAC,EAAA,6DACID,EAAME,iBAENP,GAAa,GAHjB,kBAMmCQ,MAAM,uCAAwC,CACrEC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBC,kBAAmBM,eAAeK,QAAQ,YAC1C+B,OAAQd,EAAOc,OACfC,MAAOf,EAAOe,MACdC,aAAchB,EAAOgB,aACrBC,YAAajB,EAAOiB,YACpBC,YAAalB,EAAOkB,gBAfpC,cAMYC,EANZ,gBAmB+BA,EAAe7C,OAnB9C,OAmBQ6C,EAnBR,OAoBQ3C,QAAQC,IAAI0C,GApBpB,kDAuBQzE,EAAQ,EAAD,IACPY,GAAa,GAxBrB,2DAhB6B,sBA4C/B,OACE,qBAAKtB,UAAU,SAAf,SACE,eAACgD,EAAA,EAAD,CAAMC,SA9CqB,4CA8C3B,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,SAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,sBACA,cAACL,EAAA,EAAKM,QAAN,CACEC,WAAS,EACTC,KAAK,SACLC,MAAOO,EAAOc,OACdpB,SAAUW,OAGd,eAACrB,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,QAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,wBACA,cAACL,EAAA,EAAKM,QAAN,CACEE,KAAK,QACLC,MAAOO,EAAOe,MACdrB,SAAUW,OAGd,eAACrB,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,eAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,4BACA,cAACL,EAAA,EAAKM,QAAN,CACEE,KAAK,eACLC,MAAOO,EAAOgB,aACdtB,SAAUW,OAGd,eAACrB,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,cAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,2BACA,cAACL,EAAA,EAAKM,QAAN,CACEE,KAAK,cACLC,MAAOO,EAAOiB,YACdvB,SAAUW,OAGd,eAACrB,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,cAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,2BACA,cAACL,EAAA,EAAKM,QAAN,CACEE,KAAK,cACLC,MAAOO,EAAOkB,YACdxB,SAAUW,OAGd,cAAC,EAAD,CACET,OAAK,EACLT,KAAK,KACLK,KAAK,SACLrD,UAAWA,EACXC,UAAU,EALZ,kCCxFO,SAASgF,IACpB,MAAkC/D,oBAAS,GAA3C,mBAAOlB,EAAP,KAAkBmB,EAAlB,KACA,EAAoCwC,EAAc,CAC9C1B,kBAAmB,GACnB0C,OAAQ,GACRO,aAAc,GACdC,aAAc,KAJlB,mBAAOtB,EAAP,KAAeK,EAAf,KAF6B,4CAc7B,WAA4B1C,GAA5B,eAAAC,EAAA,6DACID,EAAME,iBAENP,GAAa,GAHjB,kBAMmCQ,MAAM,uCAAwC,CACrEC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBC,kBAAmBM,eAAeK,QAAQ,YAC1C+B,OAAQd,EAAOc,OACfO,aAAcrB,EAAOqB,aACrBC,aAActB,EAAOsB,iBAbrC,cAMYC,EANZ,gBAiB+BA,EAAejD,OAjB9C,OAiBQiD,EAjBR,OAkBQ/C,QAAQC,IAAI8C,GAlBpB,kDAqBQ7E,EAAQ,EAAD,IACPY,GAAa,GAtBrB,2DAd6B,sBAwC/B,OACE,qBAAKtB,UAAU,SAAf,SACE,eAACgD,EAAA,EAAD,CAAMC,SA1CqB,4CA0C3B,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,SAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,sBACA,cAACL,EAAA,EAAKM,QAAN,CACEC,WAAS,EACTC,KAAK,SACLC,MAAOO,EAAOc,OACdpB,SAAUW,OAGd,eAACrB,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,eAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,kCACA,cAACL,EAAA,EAAKM,QAAN,CACEC,WAAS,EACTC,KAAK,eACLC,MAAOO,EAAOqB,aACd3B,SAAUW,OAGd,eAACrB,EAAA,EAAKE,MAAN,CAAYC,KAAK,KAAKC,UAAU,eAAhC,UACE,cAACJ,EAAA,EAAKK,MAAN,kCACA,cAACL,EAAA,EAAKM,QAAN,CACEC,WAAS,EACTC,KAAK,eACLC,MAAOO,EAAOsB,aACd5B,SAAUW,OAGd,cAAC,EAAD,CACET,OAAK,EACLT,KAAK,KACLK,KAAK,SACLrD,UAAWA,EACXC,UAAU,EALZ,kCC1EO,SAASoF,IACtB,OACE,eAAC,IAAD,4BAEE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,oBAAlB,SACE,cAAC3F,EAAD,MAHJ,mBAME,cAAC,IAAD,CAAO0F,OAAK,EAACC,KAAK,yBAAlB,SACE,cAAC,EAAD,MAPJ,oBAUE,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,kCAAlB,SACE,cAACb,EAAD,MAXJ,oBAcE,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,gCAAlB,SACE,cAACvB,EAAD,MAfJ,oBAkBE,cAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,kCAAlB,SACE,cAACN,EAAD,MAGF,cAAC,IAAD,UACE,cAAC,EAAD,S,oBCwJOO,MAhLf,WAII,IAAM1E,EAAUC,cAEhB,EAAgDG,oBAAS,GAAzD,mBAAOuE,EAAP,KAAyBC,EAAzB,KAIA,EAAgDxE,oBAAS,GAAzD,mBAAOyE,EAAP,KAAwB3E,EAAxB,KAVW,4CA4BX,sBAAAS,EAAA,sDACE,IACuBc,eAAeK,QAAQ,YAE1C5B,GAAqB,IAErBA,GAAqB,GACrBuB,eAAeC,QAAQ,WAAY,gBAGvC,MAAMoD,GACM,oBAANA,GACFrF,EAAQqF,GAIZF,GAAoB,GAhBtB,4CA5BW,+BAgDIG,IAhDJ,2EAgDX,sBAAApE,EAAA,sDACET,GAAqB,GACrBF,EAAQ2B,KAAK,UAFf,4CAhDW,sBAwBXC,qBAAU,YAxBC,mCAyBToD,KACC,IA2BL,IAAMC,EAAmBxD,eAAeK,QAAQ,YAEhD,MAAyB,WAArBmD,GAICN,GACC,sBAAK5F,UAAU,qBAAf,UACE,eAACmG,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAG,QAAQC,OAAO,KAAKtG,UAAU,OAA1D,UACE,cAAC,gBAAD,CAAeuG,GAAG,IAAlB,SACE,cAACJ,EAAA,EAAOK,MAAR,CAAcxG,UAAU,kCAG1B,cAACmG,EAAA,EAAOM,OAAR,IACA,cAACN,EAAA,EAAOO,SAAR,CAAiB1G,UAAU,sBAA3B,SACE,cAAC2G,EAAA,EAAD,CAAKC,UAAWC,OAAOC,SAASC,SAAhC,SACGjB,EACG,qCACE,cAACa,EAAA,EAAIK,KAAL,CAAUC,QAASjB,EAAnB,oBACA,cAAC,gBAAD,CAAeO,GAAG,IAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,qBAEF,cAAC,gBAAD,CAAeT,GAAG,gBAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,0BAIN,mCACE,cAAC,gBAAD,CAAeT,GAAG,SAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,+BAQZ,cAACxG,EAAW0G,SAAZ,CAAqBzD,MAAO,CAAEqC,kBAAiB3E,wBAA/C,SACE,cAACqE,EAAD,SAKsB,UAArBU,GAINN,GACC,sBAAK5F,UAAU,qBAAf,UACE,eAACmG,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAG,QAAQC,OAAO,KAAKtG,UAAU,OAA1D,UACE,cAAC,gBAAD,CAAeuG,GAAG,IAAlB,SACE,cAACJ,EAAA,EAAOK,MAAR,CAAcxG,UAAU,kCAG1B,cAACmG,EAAA,EAAOM,OAAR,IACA,cAACN,EAAA,EAAOO,SAAR,CAAiB1G,UAAU,sBAA3B,SACE,cAAC2G,EAAA,EAAD,CAAKC,UAAWC,OAAOC,SAASC,SAAhC,SACGjB,EACG,qCACE,cAACa,EAAA,EAAIK,KAAL,CAAUC,QAASjB,EAAnB,oBACA,cAAC,gBAAD,CAAeO,GAAG,IAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,qBAEF,cAAC,gBAAD,CAAeT,GAAG,gBAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,uBAEA,cAAC,gBAAD,CAAeT,GAAG,kBAAlB,SACF,cAACI,EAAA,EAAIK,KAAL,gCAEA,cAAC,gBAAD,CAAeT,GAAG,kBAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,mCAIN,mCACE,cAAC,gBAAD,CAAeT,GAAG,SAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,+BAQZ,cAACxG,EAAW0G,SAAZ,CAAqBzD,MAAO,CAAEqC,kBAAiB3E,wBAA/C,SACE,cAACqE,EAAD,UASLI,GACC,sBAAK5F,UAAU,qBAAf,UACE,eAACmG,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAG,QAAQC,OAAO,KAAKtG,UAAU,OAA1D,UACE,cAAC,gBAAD,CAAeuG,GAAG,IAAlB,SACE,cAACJ,EAAA,EAAOK,MAAR,CAAcxG,UAAU,kCAG1B,cAACmG,EAAA,EAAOM,OAAR,IACA,cAACN,EAAA,EAAOO,SAAR,CAAiB1G,UAAU,sBAA3B,SACE,cAAC2G,EAAA,EAAD,CAAKC,UAAWC,OAAOC,SAASC,SAAhC,SACI,qCACE,cAAC,gBAAD,CAAeR,GAAG,SAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,sBAEF,cAAC,gBAAD,CAAeT,GAAG,gBAAlB,SACE,cAACI,EAAA,EAAIK,KAAL,iCAMZ,cAACxG,EAAW0G,SAAZ,CAAqBzD,MAAO,CAAEqC,kBAAiB3E,wBAA/C,SACE,cAACqE,EAAD,UCvKG2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,gBAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c98a882b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Homepage.css\";\n\nexport default function Home() {\n  return (\n    <div className=\"Home\">\n      <div className=\"lander\">\n        <h1>Vaccine Passport Portal</h1>\n        <p className=\"text-muted\">Search for others' passports or log in to view your own passport.</p>\n      </div>\n    </div>\n  );\n}\n\n//import React from \"react\";\n//import \"./Homepage.css\";\n//import MyComponent from \"./containers/MyComponent\";\n//import { BrowserRouter, Route } from 'react-router-dom'\n//\n//class MyRouter extends React.Component {\n//  render () {\n//    return (\n//      <BrowserRouter>\n//        <Route\n//          path='/'\n//          render={ props => <MyComponent {...props} />}\n//        />\n//      </BrowserRouter>\n//    )\n//  }\n//}\n//\n//class Homepage extends React.Component {\n//    redirectToTarget = () => {\n//        this.props.history.push(`/search`)\n//    }\n//  render () {\n//    return (\n//       <div>\n//        {this.renderRedirect()}\n//        <button onClick={this.redirectToTarget}>Login</button>\n//        <button onClick={this.redirectToTarget}>Search</button>\n//       </div>\n//    )\n//  }\n//}\n\n\n////export default Homepage;\n//\n//          <form>\n//            <Button variant=\"btn btn-success\" onClick={() => history.push('/search')}>Search</Button>\n//            <Button variant=\"btn btn-success\" onClick={() => history.push('/login')}>Login</Button>\n//          </form>\n\n//import \"./Homepage.css\";\n//import { BrowserRouter, Route } from 'react-router-dom'\n//import React, { Component } from \"react\";\n//import { Button } from 'react-bootstrap';\n//\n//export default class Home extends Component {\n//  render() {\n//    return (\n//      <div className=\"Home\">\n//        <div className=\"lander\">\n//          <h1>Vaccine Passport Portal</h1>\n//          <p className=\"text-muted\"> Login to view your own passport or search to find others </p>\n//\n//        </div>\n//      </div>\n//    );\n//  }\n//}\n//export default Homepage;\n","import React from \"react\";\nimport \"./NotFound.css\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"NotFound text-center\">\n      <h3>Sorry, page not found!</h3>\n    </div>\n  );\n}","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { BsArrowRepeat } from \"react-icons/bs\";\nimport \"./LoaderButton.css\";\n\n/* This is a really simple component that takes an isLoading prop and disabled prop\nso that the user can’t click while we are in the process of logging them in.*/\nexport default function LoaderButton({\n  isLoading,\n  className = \"\",\n  disabled = false,\n  ...props\n}) {\n  return (\n    <Button\n      disabled={disabled || isLoading}\n      className={`LoaderButton ${className}`}\n      {...props}\n    >\n      {isLoading && <BsArrowRepeat className=\"spinning\" />}\n      {props.children}\n    </Button>\n  );\n}","import { useContext, createContext } from \"react\";\n/* passes the session related info to all of our containers */\nexport const AppContext = createContext(null);\n\nexport function useAppContext() {\n  return useContext(AppContext);\n}","/* error handling */\nexport function onError(error) {\n  let message = error.toString();\n\n  if (!(error instanceof Error) && error.message) {\n    message = error.message;\n  }\n\n  alert(message);\n}","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useAppContext } from \"../libs/contextLib\";\nimport { onError } from \"../libs/errorLib\";\nimport \"./Login.css\";\n\nexport default function Login() {\n  const history = useHistory();\n  const { userHasAuthenticated } = useAppContext();\n  const [isLoading, setIsLoading] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  function validateForm() {\n    return username.length > 0 && password.length > 0;\n  }\n\n  useEffect(() => {\n    const loggedInUser = sessionStorage.getItem(\"username\");\n    if (loggedInUser) {\n      const foundUser = loggedInUser;\n      if (foundUser !== \"generalUser\") {\n        setUsername(foundUser)\n      }\n    }\n  }, []);\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const loginResponse = await fetch('http://localhost:8081/login', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({authenticatedUser: username})\n      });\n\n      let loginTypeResponse = await loginResponse.text();\n      console.log(loginTypeResponse);\n      \n      sessionStorage.setItem(\"username\", username);\n      sessionStorage.setItem(\"password\", password);\n      sessionStorage.setItem(\"userType\", loginTypeResponse);\n  \n      if (loginTypeResponse === 'client') {\n        userHasAuthenticated(true);\n        history.push(\"/\");\n        console.log('client');\n      } else if (loginTypeResponse === 'admin') {\n        userHasAuthenticated(true);\n        history.push(\"/\");  \n        console.log('admin');\n      } else {\n        // clear form\n      }\n\n    } catch (e) {\n      onError(e);\n      setIsLoading(false);\n    }\n  }\n  \n  /*\n  if (username) {\n    return <div>{username} is logged in</div>;\n  }\n  */\n  \n  return (\n    <div className=\"Login\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </Form.Group>\n        <LoaderButton\n          block\n          size=\"lg\"\n          type=\"submit\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Login\n        </LoaderButton>\n      </Form>\n    </div>\n  );\n\n}","import { useState } from \"react\";\n/* handles forms for components to use */\nexport function useFormFields(initialState) {\n  const [fields, setValues] = useState(initialState);\n\n  return [\n    fields,\n    function(event) {\n      setValues({\n        ...fields,\n        [event.target.id]: event.target.value\n      });\n    }\n  ];\n}","import React, { useState } from \"react\";\n//import { Auth } from \"aws-amplify\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useAppContext } from \"../libs/contextLib\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport { onError } from \"../libs/errorLib\";\nimport \"./Login.css\";\nimport { createBrowserHistory } from \"history\";\n\nexport default function Read() {\n    const [isLoading, setIsLoading] = useState(false);\n    const [fields, handleFieldChange] = useFormFields({\n        authenticatedUser: \"\",\n        targetUser: \"\"\n    });\n\n    // TODO\n    function validateForm() {\n        return true;\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        setIsLoading(true);\n\n        try {\n            let readResponse = await fetch('http://localhost:8081/readPassport', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    authenticatedUser: sessionStorage.getItem(\"username\"),\n                    targetUser: fields.targetUser\n                })\n            });\n\n            readResponse = await readResponse.text();\n            console.log(readResponse);\n\n        } catch (e) {\n            onError(e);\n            setIsLoading(false);\n        }\n    }\n\n  return (\n    <div className=\"Read\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group size=\"lg\" controlId=\"targetUser\">\n          <Form.Label>User ID</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"targetUser\"\n            value={fields.targetUser}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <LoaderButton\n          block\n          size=\"lg\"\n          type=\"submit\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Read Passport\n        </LoaderButton>\n      </Form>\n    </div>\n  );\n}","import React from \"react\";\nimport Cookies from \"js-cookie\";\n\nexport const setSessionCookie = (session)  => {\n  Cookies.remove(\"session\");\n  Cookies.set(\"session\", session);\n};\n\nexport const getSessionCookie = () => {\n  const sessionCookie = Cookies.get(\"session\");\n\n  if (sessionCookie === undefined) {\n    return {};\n  } else {\n    return JSON.parse(sessionCookie);\n  }\n};\nconst SessionContext = React.createContext(getSessionCookie());\nexport default SessionContext;","import React, { useState } from \"react\";\n//import { Auth } from \"aws-amplify\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useAppContext } from \"../libs/contextLib\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport { onError } from \"../libs/errorLib\";\nimport \"./Login.css\";\nimport { createBrowserHistory } from \"history\";\nimport Cookies from \"js-cookie\";\nimport Session from \"../sessions\";\n\nexport default function Create() {\n    const [isLoading, setIsLoading] = useState(false);\n    const [fields, handleFieldChange] = useFormFields({\n        authenticatedUser: \"\",\n        userID: \"\",\n        owner: \"\",\n        vaccineBrand: \"\",\n        vaccineSite: \"\",\n        vaccineDate: \"\"\n    });\n\n    // TODO\n    function validateForm() {\n        return true;\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n\n        setIsLoading(true);\n\n        try {\n            let createResponse = await fetch('http://localhost:8081/createPassport', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    authenticatedUser: sessionStorage.getItem(\"username\"),\n                    userID: fields.userID,\n                    owner: fields.owner,\n                    vaccineBrand: fields.vaccineBrand,\n                    vaccineSite: fields.vaccineSite,\n                    vaccineDate: fields.vaccineDate\n                })\n            });\n\n            createResponse = await createResponse.text();\n            console.log(createResponse);\n\n        } catch (e) {\n            onError(e);\n            setIsLoading(false);\n        }\n    }\n\n  return (\n    <div className=\"Create\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group size=\"lg\" controlId=\"userID\">\n          <Form.Label>User ID</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"userID\"\n            value={fields.userID}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"owner\">\n          <Form.Label>Full Name</Form.Label>\n          <Form.Control\n            type=\"owner\"\n            value={fields.owner}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"vaccineBrand\">\n          <Form.Label>Vaccine Brand</Form.Label>\n          <Form.Control\n            type=\"vaccineBrand\"\n            value={fields.vaccineBrand}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"vaccineSite\">\n          <Form.Label>Vaccine Site</Form.Label>\n          <Form.Control\n            type=\"vaccineSite\"\n            value={fields.vaccineSite}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"vaccineDate\">\n          <Form.Label>Vaccine Date</Form.Label>\n          <Form.Control\n            type=\"vaccineDate\"\n            value={fields.vaccineDate}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <LoaderButton\n          block\n          size=\"lg\"\n          type=\"submit\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Create Passport\n        </LoaderButton>\n      </Form>\n    </div>\n  );\n}","import React, { useState } from \"react\";\n//import { Auth } from \"aws-amplify\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { useAppContext } from \"../libs/contextLib\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport { onError } from \"../libs/errorLib\";\nimport \"./Login.css\";\nimport { createBrowserHistory } from \"history\";\nimport Cookies from \"js-cookie\";\nimport Session from \"../sessions\";\n\nexport default function Update() {\n    const [isLoading, setIsLoading] = useState(false);\n    const [fields, handleFieldChange] = useFormFields({\n        authenticatedUser: \"\",\n        userID: \"\",\n        vaccineSite2: \"\",\n        vaccineDate2: \"\"\n    });\n\n    // TODO\n    function validateForm() {\n        return true;\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n\n        setIsLoading(true);\n\n        try {\n            let updateResponse = await fetch('http://localhost:8081/updatePassport', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    authenticatedUser: sessionStorage.getItem(\"username\"),\n                    userID: fields.userID,\n                    vaccineSite2: fields.vaccineSite2,\n                    vaccineDate2: fields.vaccineDate2\n                })\n            });\n\n            updateResponse = await updateResponse.text();\n            console.log(updateResponse);\n\n        } catch (e) {\n            onError(e);\n            setIsLoading(false);\n        }\n    }\n\n  return (\n    <div className=\"Update\">\n      <Form onSubmit={handleSubmit}>\n        <Form.Group size=\"lg\" controlId=\"userID\">\n          <Form.Label>User ID</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"userID\"\n            value={fields.userID}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"vaccineSite2\">\n          <Form.Label>Second Vaccine Site</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"vaccineSite2\"\n            value={fields.vaccineSite2}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"vaccineDate2\">\n          <Form.Label>Second Vaccine Date</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"vaccineDate2\"\n            value={fields.vaccineDate2}\n            onChange={handleFieldChange}\n          />\n        </Form.Group>\n        <LoaderButton\n          block\n          size=\"lg\"\n          type=\"submit\"\n          isLoading={isLoading}\n          disabled={!validateForm()}\n        >\n          Update Passport\n        </LoaderButton>\n      </Form>\n    </div>\n  );\n}","import React from \"react\";\nimport {Route, Switch } from \"react-router-dom\";\nimport Homepage from \"./containers/Homepage\";\nimport NotFound from \"./containers/NotFound\";\nimport Login from \"./containers/Login\";\nimport Read from \"./containers/Read\";\nimport Create from \"./containers/Create\";\nimport Update from \"./containers/Update\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      /* homepage */\n      <Route exact path=\"/vaccine-passport\">\n        <Homepage />\n      </Route>\n      /* login page */\n      <Route exact path=\"vaccine-passport/login\">\n        <Login />\n      </Route>\n      /* create page */\n      <Route exact path=\"vaccine-passport/createPassport\">\n        <Create />\n      </Route>\n      /* search page */\n      <Route exact path=\"vaccine-passport/readPassport\">\n        <Read />\n      </Route>\n      /* update page */\n      <Route exact path=\"vaccine-passport/updatePassport\">\n        <Update />\n      </Route>\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <NotFound />\n      </Route>\n    </Switch>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { AppContext } from \"./libs/contextLib\";\nimport { useHistory } from \"react-router-dom\";\nimport { onError } from \"./libs/errorLib\";\n\nfunction App() {\n    // 1) load user session\n\n    // browser's history api\n    const history = useHistory();\n    // setting to true -> start checking current authentication state of user\n    const [isAuthenticating, setIsAuthenticating] = useState(true);\n\n    // updating the application state by setting that the user is logged in\n    // set false, because user not logged in yet. calling userHasAuthenticated updates it\n    const [isAuthenticated, userHasAuthenticated] = useState(false);\n\n    /* The useEffect hook takes a function and an array of variables.\n    The function will be called every time the component is rendered.\n    And the array of variables tell React to only re-run our function\n    if the passed in array of variables have changed.\n    This allows us to control when our function gets run.\n\n    If we don’t pass in an array of variables, our hook gets executed everytime our component is rendered.\n    If we pass in some variables, on every render React will first check if those variables have changed,\n    before running our function.\n    If we pass in an empty list of variables, then it’ll only run our function on the FIRST render.\n    In our case, we only want to check the user’s authentication state when our app first loads.\n    So we’ll use the third option; just pass in an empty list of variables — [].*/\n    useEffect(() => {\n      onLoad();\n    }, []);\n\n    async function onLoad() {\n      try {\n        const loggedInUser = sessionStorage.getItem(\"username\");\n        if (loggedInUser) {\n          userHasAuthenticated(true);\n        } else {\n          userHasAuthenticated(false);\n          sessionStorage.setItem(\"username\", \"generalUser\");\n        }\n      }\n      catch(e) {\n        if (e !== 'No current user') {\n          onError(e);\n        }\n      }\n\n      setIsAuthenticating(false);\n    }\n\n    /* redirects us back to the login page once the user logs out */\n    async function handleLogout() {\n      userHasAuthenticated(false);\n      history.push(\"/login\");\n    }\n\n  const loggedInUserType = sessionStorage.getItem(\"userType\");\n\n  if (loggedInUserType === 'client') {\n    return (\n    // dont render until !isAuthenticating because loading user session is asynch.\n    // this ensures app doesnt change states in the middle of init load\n      !isAuthenticating && (\n        <div className=\"App container py-3\">\n          <Navbar collapseOnSelect bg=\"light\" expand=\"md\" className=\"mb-3\">\n            <LinkContainer to=\"/\">\n              <Navbar.Brand className=\"font-weight-bold text-muted\">\n              </Navbar.Brand>\n            </LinkContainer>\n            <Navbar.Toggle />\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Nav activeKey={window.location.pathname}>\n                {isAuthenticated ? (\n                    <>\n                      <Nav.Link onClick={handleLogout}>Logout</Nav.Link>\n                      <LinkContainer to=\"/\">\n                        <Nav.Link>Home</Nav.Link>\n                      </LinkContainer>\n                      <LinkContainer to=\"/readPassport\">\n                        <Nav.Link>Search</Nav.Link>\n                      </LinkContainer>\n                    </>\n                ) : (\n                  <>\n                    <LinkContainer to=\"/login\">\n                      <Nav.Link>Login</Nav.Link>\n                    </LinkContainer>\n                  </>\n                )}\n\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\n            <Routes />\n          </AppContext.Provider>\n        </div>\n      )\n    );\n  } else if (loggedInUserType === 'admin') {\n    return (\n    // dont render until !isAuthenticating because loading user session is asynch.\n    // this ensures app doesnt change states in the middle of init load\n      !isAuthenticating && (\n        <div className=\"App container py-3\">\n          <Navbar collapseOnSelect bg=\"light\" expand=\"md\" className=\"mb-3\">\n            <LinkContainer to=\"/\">\n              <Navbar.Brand className=\"font-weight-bold text-muted\">\n              </Navbar.Brand>\n            </LinkContainer>\n            <Navbar.Toggle />\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Nav activeKey={window.location.pathname}>\n                {isAuthenticated ? (\n                    <>\n                      <Nav.Link onClick={handleLogout}>Logout</Nav.Link>\n                      <LinkContainer to=\"/\">\n                        <Nav.Link>Home</Nav.Link>\n                      </LinkContainer>\n                      <LinkContainer to=\"/readPassport\">\n                        <Nav.Link>Search</Nav.Link>\n                      </LinkContainer>\n                        <LinkContainer to=\"/createPassport\">\n                      <Nav.Link>Create Passport</Nav.Link>\n                        </LinkContainer>\n                      <LinkContainer to=\"/updatePassport\">\n                        <Nav.Link>Update Passport</Nav.Link>\n                      </LinkContainer>\n                    </>\n                ) : (\n                  <>\n                    <LinkContainer to=\"/login\">\n                      <Nav.Link>Login</Nav.Link>\n                    </LinkContainer>\n                  </>\n                )}\n\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\n            <Routes />\n          </AppContext.Provider>\n        </div>\n      )\n    );\n  }\n  return (\n    // dont render until !isAuthenticating because loading user session is asynch.\n    // this ensures app doesnt change states in the middle of init load\n      !isAuthenticating && (\n        <div className=\"App container py-3\">\n          <Navbar collapseOnSelect bg=\"light\" expand=\"md\" className=\"mb-3\">\n            <LinkContainer to=\"/\">\n              <Navbar.Brand className=\"font-weight-bold text-muted\">\n              </Navbar.Brand>\n            </LinkContainer>\n            <Navbar.Toggle />\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Nav activeKey={window.location.pathname}>        \n                  <>\n                    <LinkContainer to=\"/login\">\n                      <Nav.Link>Login</Nav.Link>\n                    </LinkContainer>\n                    <LinkContainer to=\"/readPassport\">\n                      <Nav.Link>Search</Nav.Link>\n                    </LinkContainer>\n                  </>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\n            <Routes />\n          </AppContext.Provider>\n        </div>\n      )\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n/* The index.js file is to provide easy entry points for components. Even though they add noise, they simplify imports. */\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}